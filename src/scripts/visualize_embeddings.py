#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script for Visualizing and Saving Embeddings with PCA.

This script loads embeddings generated by a trained model, performs PCA on each categorical 
feature's embeddings, and saves the resulting scatter plots in the specified format and directory.

Usage:
    python visualize_embeddings.py --data_path path/to/data --model_path path/to/model_weights/TabTransformer_model.ckpt --save_plots figures/SI --plot_format pdf

Ensure that the dataset paths, model path, and save directory are correctly specified before running the script.
"""

import os
import argparse
import logging
import warnings
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import torch

# PyTorch Tabular and Model imports
from pytorch_tabular import TabularModel
from pytorch_tabular.categorical_encoders import CategoricalEmbeddingTransformer

# Custom data processing functions (assumed to be in the src.data module)
import sys
sys.path.append('../')
from src.data.process_data import load_dataset, split_dataset

# Suppress common warnings
logging.getLogger("pytorch_lightning").setLevel(logging.ERROR)
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=pd.errors.PerformanceWarning)


def load_data(data_path):
    """
    Load and split the dataset, then return categorical columns.
    """
    drug_syn_path = os.path.join(data_path, 'drug_synergy.csv')
    cell_lines_path = os.path.join(data_path, 'cell_lines.csv')
    drug_portfolio_path = os.path.join(data_path, 'drug_portfolio.csv')
    
    full_dataset_df, column_type_dict = load_dataset(drug_syn_path, cell_lines_path, drug_portfolio_path)
    datasets = split_dataset(full_dataset_df)

    categorical_cols = column_type_dict['categorical']['col_names']
    return datasets, categorical_cols


def extract_embeddings(model, X, categorical_cols):
    """
    Extract embeddings for each unique value in the categorical columns.
    """
    transformer = CategoricalEmbeddingTransformer(model)
    X_trans = transformer.transform(X)
    unique_embeddings_dict = {}

    for col in categorical_cols:
        # Identify embedding columns related to this categorical column
        embedding_cols = [c for c in X_trans.columns if c.startswith(f"{col}_embed_dim")]
        
        # Combine the original column values with their embeddings
        combined_df = pd.concat([X[col].reset_index(drop=True), X_trans[embedding_cols].reset_index(drop=True)], axis=1)
        
        # Store unique embeddings for each value in a dictionary format
        unique_embeddings_dict[col] = {
            val: group[embedding_cols].values[0] for val, group in combined_df.groupby(col)
        }

    return unique_embeddings_dict


def plot_pca_embeddings(embeddings_dict, category_name, save_path, plot_format, n_components=2):
    """
    Applies PCA to embeddings and saves the plot.

    Parameters:
        embeddings_dict (dict): Dictionary containing unique items and their embeddings as numpy arrays.
        category_name (str): Name of the categorical variable.
        save_path (str): Path to save the plot.
        plot_format (str): Format for saving the plot, e.g., 'pdf' or 'png'.
        n_components (int): Number of PCA components to retain for plotting.
    """
    embeddings = np.stack(list(embeddings_dict.values()))
    labels = list(embeddings_dict.keys())
    
    pca = PCA(n_components=n_components)
    pca_result = pca.fit_transform(embeddings)
    
    plt.figure(figsize=(8, 6))
    plt.scatter(pca_result[:, 0], pca_result[:, 1], alpha=0.6, edgecolors="k")
    
    for i, label in enumerate(labels):
        plt.annotate(label, (pca_result[i, 0], pca_result[i, 1]), fontsize=8, alpha=0.75)
    
    plt.title(f"PCA {category_name} embeddings")
    plt.xlabel("PC1")
    plt.ylabel("PC2")
    plt.grid(True)
    
    # Ensure the save path directory exists
    os.makedirs(save_path, exist_ok=True)
    
    # Save plot with specified format and high resolution
    plot_file = os.path.join(save_path, f"{category_name}_pca.{plot_format}")
    plt.savefig(plot_file, format=plot_format, dpi=300)
    plt.close()
    print(f"Plot saved to: {plot_file}")


def main():
    """
    Main function to execute the PCA visualization on embeddings and save the plots.
    """
    parser = argparse.ArgumentParser(description='Script for Visualizing and Saving Embeddings with PCA.')
    parser.add_argument('--data_path', type=str, required=True, help='Path to the directory containing data file.')
    parser.add_argument('--model_path', type=str, required=True, help='Path to the saved model checkpoint.')
    parser.add_argument('--save_plots', type=str, required=True, help='Directory where plots will be saved.')
    parser.add_argument('--plot_format', type=str, choices=['pdf', 'png'], default='pdf', help='Format for saving plots.')
    args = parser.parse_args()

    # Load the trained model
    model = TabularModel.load_model(args.model_path, map_location=torch.device("cpu"))

    # Load and prepare data
    datasets, categorical_cols = load_data(args.data_path)
    X = datasets['train']['X'][categorical_cols]  # Extract only categorical columns

    # Extract unique embeddings for each categorical column
    unique_embeddings_dict = extract_embeddings(model, X, categorical_cols)

    # Columns for PCA plotting
    pca_columns = ['Cell line name', 'Compound A', 'Compound B', 'GDSC tissue descriptor 2', 
                   'Putative target_A', 'Function_A', 'Pathway_A', 'Putative target_B', 
                   'Function_B', 'Pathway_B']

    # Plot and save PCA for each specified column
    for category in pca_columns:
        if category in unique_embeddings_dict:
            print(f"Generating PCA plot for '{category}' and saving as {args.plot_format}...")
            plot_pca_embeddings(unique_embeddings_dict[category], category, args.save_plots, args.plot_format)

if __name__ == '__main__':
    main()
